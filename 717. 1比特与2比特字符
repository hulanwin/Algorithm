717. 1比特与2比特字符
有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或 11)来表示。
现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。

示例 1:
输入: 
bits = [1, 0, 0]
输出: True
解释: 
唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。

示例 2:
输入: 
bits = [1, 1, 1, 0]
输出: False
解释: 
唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。

注意:
1 <= len(bits) <= 1000.
bits[i] 总是0 或 1.

class Solution {
public:
    bool isOneBitCharacter(vector<int>& bits) {
        int i=bits.size()-2;//从最后一位0的前一位开始。
        while(i>=0&&bits[i]==1) i--;//因为0意味着一个字符的结束，所以先找到倒数第二个0的下标i。因为分别是倒数第一和第二个，两个0之间就只可能有1存在，之后便可以统计出1的个数。
        return (bits.size()-2-i)%2==0;//如果两个0之间的1的个数为偶数k代表刚好凑成k除2个字符，最后一个0便是单独字符的开头，故最后一位为一比特字符；否则1的个数为奇数，那么最后一个1便是一个二比特字符的开头，必定需要再加一位即是最后一个0来凑成一个字符，此时最后一位为二比特字符。
    }
};