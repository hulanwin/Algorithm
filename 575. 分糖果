575. 分糖果
给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。

示例 1:
输入: candies = [1,1,2,2,3,3]
输出: 3
解析: 一共有三种种类的糖果，每一种都有两个。
     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。

示例 2 :
输入: candies = [1,1,2,3]
输出: 2
解析: 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。

注意:
数组的长度为[2, 10,000]，并且确定为偶数。
数组中数字的大小在范围[-100,000, 100,000]内。

思路
糖果的种类是可妹妹先来，所以思路先求出一共有多少种类型的糖果，需要注意： 数组中数字的大小也就是糖果的种类取值范围在[负十万和 正十万之间]， 依然可以定义一个数组，通过哈希法求出有多少类型的糖果，那么糖果种类可以是负数 怎么办呢，可以把定一个 20万大小的数组，
就可以把糖果的全部类型映射到数组的下表了。

通过哈希法，可以求出了糖果的类型数量，如果糖果种类大于糖果总数的一半了，返回 糖果数量的一半就好，因为妹妹已经得到种类最多的糖果了，否则，就是返回 糖果的种类。


class Solution {
public:
    int distributeCandies(vector<int>& candies) {
        // 初始化一个record数组，因为糖果种类的数值在范围[-100,000, 100,000]内
        // 将这个范围的数值统一加上100000，可以映射到record数组的索引下表了
        // record数组大小必须大于等于200001，这样才能取到200000这个下表索引
        int record[200001] = {0};
        // 通过record来记录糖果的种类
        for (int i = 0; i < candies.size(); i++) {
            record[candies[i] + 100000]++;
        }
        // 统计糖果种类的数量
        int count = 0;
        for (int i = 0; i < 200001; i++) {
            if (record[i] != 0) {
                count ++;
            }
        }
        int half = candies.size() / 2;
        // 如果糖果种类大于糖果总数的一半了，return 糖果数量的一半
        // 否则，就是return 糖果的种类。
        return count > half ? half : count;
    }
};



哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表。

一个通俗的例子是，为了查找电话簿中某人的号码，可以创建一个按照人名首字母顺序排列的表（即建立人名 x到首字母 F(x)的一个函数关系）在首字母为W的表中查找 “王” 姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母” 是这个例子中哈希函数的函数法则 F()，存放首字母的表对应哈希表。关键字和函数法则理论上可以任意确定。

哈希表是使用 O(1)时间进行数据的插入删除和查找，但是哈希表不保证表中数据的有序性，这样在哈希表中查找最大数据或者最小数据的时间是 O(N)实现。

