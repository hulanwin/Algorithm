720. 词典中最长的单词
给出一个字符串数组words组成的一本英语词典。从中找出最长的一个单词，该单词是由words词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。

若无答案，则返回空字符串。

示例 1：
输入：
words = ["w","wo","wor","worl", "world"]
输出："world"
解释： 
单词"world"可由"w", "wo", "wor", 和 "worl"添加一个字母组成。

示例 2：
输入：
words = ["a", "banana", "app", "appl", "ap", "apply", "apple"]
输出："apple"
解释：
"apply"和"apple"都能由词典中的单词组成。但是"apple"的字典序小于"apply"。
 
提示：
所有输入的字符串都只包含小写字母。
words数组长度范围为[1,1000]。
words[i]的长度范围为[1,30]。


class Solution {
public:
    string longestWord(vector<string>& words) {
        unordered_set<string> set1;   //不需要排序，所以用unordered_map效率更高
        for(string word : words){
            set1.insert(word);         //将words中的每个元素插入set集合
        }
        string res = "";
        int count = 0;
        for(string word : words){
            if(word.size() > res.size() || (word.size() == res.size() && word.compare(res) < 0)){ //只考虑比当前res长 或者和res一样长且字典序比res小的string元素
                bool flag = true;
                for(int i = 1; i < word.size(); ++i){
                    string tmp = word.substr(0, i);   //取前缀，前缀长度累增
                    if(set1.count(tmp))   //如果前缀在set集合中，那么就继续
                    continue;
                    else{                   //前缀不在，说明不符合要求，立即跳出
                        flag = false;
                        break;
                    }
                }
                if(flag)
                res = word;
            }
        }
        return res;
    }
};