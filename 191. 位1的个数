191. 位1的个数
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

//解法一
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count =0;
        while(n!=0){
            n=n&(n-1);
            count++;
        }
        return count;
    }
};
   
//解法2：除2取余法
int hammingWeight_2(uint32_t n) {
    int count=0;
    while(n){
        if(n%2==1)count++;
        n/=2;
        }
        return count;
    }
    
//解法3：直接判读最低为是否为1即可
int hammingWeight_3(uint32_t n) {
    int count=0;
    while(n){
        count+=n&1;//比如111与1相与得到001，所以直接判断最低位是不是1就好了
        n>>=1;//缩小2倍，给面试官装逼用的
        }
        return count;
    }
    
//解法4：技巧法。由于在二进制表示中，数字n中最低位的1总是对应n-1中的0。因此，将n和n-1与运算总是n中最低位的1变成0（最低位的0不考虑）,并保持其他位不变。
int hammingWeight_4(uint32_t n) {
    int count=0;
    while(n){
        count++;
        n&=n-1;
        }
        return count;
    }
};