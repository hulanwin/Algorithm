513. 找树左下角的值
给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:
输入:

    2
   / \
  1   3
输出:
1
 
示例 2:
输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7
输出:
7 

注意: 您可以假设树（即给定的根节点）不为 NULL。

解题思路
广度优先遍历
寻找左子树 即i为偶数
flag 判断当前行是否已经记录

代码
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int findBottomLeftValue(TreeNode* root) {
		int res = 0;
		queue<TreeNode*> q;
		if (root == nullptr)return res;
		q.push(root);
		while (!q.empty()) {
			int size = q.size();
			bool flag = false;
			for (int i = 0; i < size; i++)
			{
				TreeNode* cur = q.front();
				q.pop();
				if (cur->left) {
					q.push(cur->left);
				}
				if (cur->right) {
					q.push(cur->right);
				}
				//寻找左子树 即i为偶数
				//flag 判断当前行是否已经记录
				if (i % 2 ==0&&!flag) {
					res = cur->val;
					flag = !flag;
				}
			}
		}
		return res;
	}
};