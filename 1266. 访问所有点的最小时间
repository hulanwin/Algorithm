1266. 访问所有点的最小时间
平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi]。请你计算访问所有这些点需要的最小时间（以秒为单位）。
你可以按照下面的规则在平面上移动：
每一秒沿水平或者竖直方向移动一个单位长度，或者跨过对角线（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。
必须按照数组中出现的顺序来访问这些点。
 
示例 1：
输入：points = [[1,1],[3,4],[-1,0]]
输出：7
解释：一条最佳的访问路径是： [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
从 [1,1] 到 [3,4] 需要 3 秒 
从 [3,4] 到 [-1,0] 需要 4 秒
一共需要 7 秒

示例 2：
输入：points = [[3,2],[-2,2]]
输出：5
 
提示：
points.length == n
1 <= n <= 100
points[i].length == 2
-1000 <= points[i][0], points[i][1] <= 100

解题 
切比雪夫距离
在二维空间内，两个点之间的距离为他们横坐标之差的绝对值和纵坐标之差的绝对值的最大值。
设点A（x1,y1），B(x2,y2）,则A，B之间的切比雪夫距离为
    d(A,B)=max(|x1-x2|,|y1-y2|);


class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {

        int i=0;  //用i来遍历数组
        int res=0; //时间总和
        int tmp=0; //暂存距离

        while(i<points.size()-1){
            //求数组中相邻两点横坐标和纵坐标差值的最大值，注意绝对值
            tmp=max(abs(points[i+1][0]-points[i][0]),abs(points[i+1][1]-points[i][1]));
            res+=tmp;
            i++;
        }
        return res;
    }
};

