1160. 拼写单词
给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。
假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。

注意：每次拼写（指拼写词汇表中的一个单词）时，chars 中的每个字母都只能用一次。

返回词汇表 words 中你掌握的所有单词的 长度之和。

示例 1：
输入：words = ["cat","bt","hat","tree"], chars = "atach"
输出：6
解释： 
可以形成字符串 "cat" 和 "hat"，所以答案是 3 + 3 = 6。

示例 2：
输入：words = ["hello","world","leetcode"], chars = "welldonehoneyr"
输出：10
解释：
可以形成字符串 "hello" 和 "world"，所以答案是 5 + 5 = 10。
 
提示：
1 <= words.length <= 1000
1 <= words[i].length, chars.length <= 100
所有字符串中都仅包含小写英文字母


#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;
 
class Solution {
public:
    int countCharacters(vector<string>& words, string chars) {
 
        /* 计算满足条件的单词 */
        int res_num = 0;
 
        /* 生成哈希表 */
        for (int i = 0; i < chars.length(); i++) {
            if (s_map.count(chars[i]) == 0) {
                s_map[chars[i]] = 1;
 
            }
            else {
                s_map[chars[i]]++;
            }
        }
 
        /* 遍历数组 */
        for (int i = 0; i < words.size(); i++) {
            int flag = true;
 
            /* 拷贝哈希表 */
            unordered_map<char, int> m_map(s_map);
 
            /* 遍历字符 */
            for (int j = 0; j < words[i].length(); j++) {
 
                /* 如果出现chars中没有字母，此单词必定没掌握 */
                if (m_map.count(words[i][j]) == 0) {
                    flag = false;
                    break;
                }
 
                /* chars字母表中的字母每个仅仅使用一次  */
                else {
                    m_map[words[i][j]]--;
                    if (m_map[words[i][j]] < 0) {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag) {
                res_num += words[i].length();
            }
        }
        return res_num;
    }
private:
    unordered_map<char, int> s_map;
};
 
 
int main() {
    vector<string> words2 = { "cat", "bt", "hat", "tree" };
    string chars2 = "atach";
 
    vector<string> words3 = { "hello", "world", "leetcode" };
    string chars3 = "welldonehoneyr";
 
    Solution* ps = new Solution();
    cout << ps->countCharacters(words2, chars2) << endl;
 
    return 0;
}