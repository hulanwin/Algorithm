476. 数字的补数
给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。

示例 1:
输入: 5
输出: 2
解释: 5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出2

示例 2:
输入: 1
输出: 0
解释: 1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。
 
注意:
给定的整数保证在 32 位带符号整数的范围内。
你可以假定二进制数不包含前导零位。

5是3位二进制位的，5的补数就是2^3-1-5=2
所以，先判断是num共有几位二进制位digits,然后返回pow(2,digits)-1-num

代码
class Solution {
public:
    int findComplement(int num) {
        int digits;
        for(long i=0;i<=30;i++){
            if(pow(2,i)<=num&&num<pow(2,i+1)){
                digits=i+1;
                break;
            }        
        }
        return pow(2,digits)-1-num;
    }
};

