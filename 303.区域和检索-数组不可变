303.区域和检索-数组不可变
给定一个整数数组  nums，求出数组从索引i到j(i ≤ j) 范围内元素的总和，
包含 i,  j 两点。

示例：
给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为sumRange()
sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3

说明:
你可以假设数组不可变。
会多次调用 sumRange 方法。

class NumArray {
    vector<int> num;
public:
    NumArray(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            num.push_back(nums[i]);
        }
    }
    
    int sumRange(int i, int j) {
        int sum=0;
        for(int k=i;k<=j;k++)
        {
            sum+=num[k];
        }
        return sum;
    }
};


参考方法二
使用累积和
class NumArray {
private: 
    vector<int> _sum;
public:
    NumArray(vector<int>& nums) {
        _sum.resize(nums.size() + 1);
        for (int i = 0; i < nums.size(); i++) {
            _sum[i+1] = _sum[i] + nums[i];
        }
    }
    
    int sumRange(int i, int j) {
        return _sum[j+1] - _sum[i];
    }
};
注意sum[i]的定义是nums[0]...nums[i-1]的累计和