剑指 Offer 68 - II. 二叉树的最近公共祖先
给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]
            3
           / \
          5   1
         / \  / \
        6   2 0  8
           / \
          7   4 
示例 1:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。

示例 2:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
 

说明:
所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //思路：获取头节点到两个指定节点的两个链表，他们的前部分必然相同，
 //最后一个相同的节点便是最近公共祖先啦。
class Solution {
public:
    vector<TreeNode*> vecp;
    vector<TreeNode*> vecq;
    vector<TreeNode*> temp;
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        dfstree(root,p,q);
        TreeNode* resnode=nullptr;
        int vecqlen=vecq.size();
        int vecplen=vecp.size();
        //最后一个相同的节点便是最近公共祖先啦。
        for(int i=0;i<min(vecqlen,vecplen);i++) if(vecq[i]==vecp[i]) resnode=vecq[i];
        
        return resnode;
    }

    void dfstree(TreeNode* root, TreeNode* p, TreeNode* q){
        if(root==nullptr) return;
        if(root==p||root==q){
            if(root==p){
                temp.push_back(root);
                vecp=temp; //获取头节点到两个指定节点的两个链表
                temp.pop_back();
            }
            else{
                temp.push_back(root);
                vecq=temp;//获取头节点到两个指定节点的两个链表
                temp.pop_back();
            }
        }
        temp.push_back(root);
        dfstree(root->left,p,q);
        dfstree(root->right,p,q);
        temp.pop_back();
    }
};
