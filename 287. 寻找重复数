287. 寻找重复数
给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
示例 1:
输入: [1,3,4,2,2]
输出: 2

示例 2:
输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。

#include <iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
int main( ){
   int n=0;
   cout<<"please input the number"<<endl;
   cin>>n;
   int a[1000];
   for(int i=0;i<n;i++){
       cin>>a[i];
   }
   for(int i=0;i<n;i++){
      for(int j=i+1;j<n;j++){
          if(a[j]==a[i]){
              cout<<a[j]<<endl;
              break;
            }
        }
   }
   return 0;  
}

时间优先：1.哈希(N) 2.快慢指针(N) 3.二分法(NlogN) 4.排序(NlogN) 5.unique
其中时间O(N)且空间O(1)方法：快慢指针

哈希
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_set<int> myset;
        for (int i = 0; i < nums.size(); ++i) {
            if (myset.find(nums[i]) != myset.end())
                return nums[i];
            myset.insert(nums[i]);
        }
        return -1;
    }
};

快慢指针
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow1 = nums[0], slow2 = nums[0], fast = nums[0];
        do {
            slow1 = nums[slow1];
            fast = nums[nums[fast]];
        } while (slow1 != fast);//判断是否有环

        while (slow1 != slow2) {//判断环入口
            slow1 = nums[slow1];
            slow2 = nums[slow2];
        }
        return slow1;
    }
};

二分法
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int l = 1, r = n - 1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int i = 0; i < n; ++i)
                cnt += nums[i] <= mid;
            if (cnt <= mid) l = mid + 1;
            else r = mid - 1;
        }
        return r + 1;
    }
};

排序
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i)
            if (nums[i] == nums[i - 1]) return nums[i];
        return -1;
    }
};
