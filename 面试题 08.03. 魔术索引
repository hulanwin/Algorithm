面试题 08.03. 魔术索引
魔术索引。 在数组A[0...n-1]中，有所谓的魔术索引，满足条件A[i] = i。给定一个有序整数数组，编写一种方法找出魔术索引，若有的话，在数组A中找出一个魔术索引，如果没有，则返回-1。若有多个魔术索引，返回索引值最小的一个。

示例1:
输入：nums = [0, 2, 3, 4, 5]
输出：0
说明: 0下标的元素为0

示例2:
输入：nums = [1, 1, 1]
输出：1

提示:
nums长度在[1, 1000000]之间

法一：暴力循环
#include <iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
int main( ){
   int n;
   cout<<"please input the number"<<endl;
   cin>>n;
   int a[1000];
   for(int i=0;i<n;i++){
       cin>>a[i];
   }
    for(int i=0;i<n;i++){
       if(i==a[i]){
          cout<<i<<endl;
       }
   }
   return 0;  
}

法二 二分
class Solution {
public:
    int findMagicIndex(vector<int>& nums) {
        if (nums.empty())   return -1;
        return search(nums, 0, nums.size() - 1);
    }
    int search(vector<int>& nums, int left, int right){
        // 分治 + 二分查找
        if (left >= right){
            if(nums[left] == left)  return left;
            else    return -1;
        }
        int mid = left + (right - left) / 2;
        int ret = 0;
        if (mid == nums[mid]){
            // 当中点符合条件时,还需向前半段去验证是否存在更小符合条件的数
            ret = search(nums, left, mid - 1);
            return ret == -1 ? mid: ret;
        }
        else{
            // 当中点不满足的时候,分别向左半段和右半段递归去找更小的数
            // 当左半段出现的符合条件的数,直接返回右半段就不需要找了
            ret = search(nums, left, mid - 1);
            if (ret != -1)  return ret;
            ret = search(nums, mid + 1, right);
            return ret == -1 ? -1 : ret;
        }
        return -1;
    }
};