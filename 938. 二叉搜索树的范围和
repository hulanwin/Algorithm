938. 二叉搜索树的范围和
给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。
二叉搜索树保证具有唯一的值。

示例 1：
输入：root = [10,5,15,3,7,null,18], L = 7, R = 15
输出：32

示例 2：
输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
输出：23
 
提示：
树中的结点数量最多为 10000 个。
最终的答案保证小于 2^31。

思路：本题求节点值在[L,R]之间的所有节点的值的总和。
由于是在二叉搜索树上。二叉搜索树的左子树节点的值 < 根节点的值 < 右子树节点的值。

当 L <= root.val 时，左子树可能还有在[L,R]中的节点。递归求和。
当 R >= root.val 时，右子树可能还有在[L,R]中的节点。递归求和。
当 L <= root.val <= R 时，根节点也在[L,R]中，结果加上root.val。


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        if(!root) return 0;
        int l=0,r=0;
        if(root->val >= L){
            l = rangeSumBST(root->left,L,R);
        }
        if(root->val <= R){
            r = rangeSumBST(root->right,L,R);
        }
        int ans = l+r;
        if(L <= root->val  && root->val <= R){
            ans += root->val;
        }
        return ans;
    }
};