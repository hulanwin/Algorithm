剑指 Offer 39. 数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

示例 1:

输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2
 
限制：
1 <= 数组长度 <= 50000

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //方法1：排序后中间的元素一定是出现超过一半的数字
        sort(nums.begin(),nums.end());
        return nums[nums.size()/2];

        //方法2：哈希表
        unordered_map<int,int>mp;
        for(auto it : nums){
            mp[it]++;
            if(mp[it]>nums.size()/2) return it;
        }
        return 0;

        //方法3：超过一半的数字比其他所有数字的总和次数多
        int n=1;
        int result=nums[0];
        for(int i=1;i<nums.size();i++){
            if(n==0){
                result=nums[i];
                n=1;
            }
            else if(result==nums[i])n++;
            else n--;
        }
        return result;
    }
};
 