868. 二进制间距
给定一个正整数 N，找到并返回 N 的二进制表示中两个连续的 1 之间的最长距离。 
如果没有两个连续的 1，返回 0 。
 
示例 1：
输入：22
输出：2
解释：
22 的二进制是 0b10110 。
在 22 的二进制表示中，有三个 1，组成两对连续的 1 。
第一对连续的 1 中，两个 1 之间的距离为 2 。
第二对连续的 1 中，两个 1 之间的距离为 1 。
答案取两个距离之中最大的，也就是 2 。

示例 2：
输入：5
输出：2
解释：
5 的二进制是 0b101 。

示例 3：
输入：6
输出：1
解释：
6 的二进制是 0b110 。

示例 4：
输入：8
输出：0
解释：
8的二进制是0b1000 。
在8的二进制表示中没有连续的1，所以返回0 。
 
提示：
1 <= N <= 10^9


class Solution {
public:
    string tmp;
    int binaryGap(int N) {
        //先转换成二进制串
        int flag=0;
        while(N)
        {
            if(N%2)
            {
                tmp='1'+tmp;
                flag++;
            }
            else
                tmp='0'+tmp;;
            N=N/2;
        }
        if(flag<2) //没有两个1
            return 0;;
        int ret=0;
        //从左到右来找
        int sig=0;//也是记录第一个一的下标
        for(int i=0;i<tmp.size();i++)
        {
            if(tmp[i]=='1')  
            {
                ret= (ret>(i-sig))? ret:(i-sig);
                sig=i;//更新再次出现的一          
            }
        }
        return ret;    
    }
};